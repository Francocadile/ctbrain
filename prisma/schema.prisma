generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @id @default(cuid())
  email                   String            @unique
  name                    String?
  password                String?
  role                    String            @default("user")
  approved                Boolean           @default(false)
  teamId                  String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  clinicalEntries         ClinicalEntry[]
  exercises               Exercise[]
  plannerPrefs            PlannerPrefs?
  rpeEntries              RPEEntry[]
  sessions                Session[]         @relation("UserSessions")
  createdTrainingSessions TrainingSession[]
  team                    Team?             @relation("TeamToUser", fields: [teamId], references: [id])
  userTeams               UserTeam[]
  wellnessEntries         WellnessEntry[]
}

model Session {
  id          String      @id @default(cuid())
  title       String
  description String?
  date        DateTime
  type        SessionType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  user        User        @relation("UserSessions", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([createdBy])
}

model Rival {
  id                   String    @id @default(cuid())
  name                 String    @unique
  logoUrl              String?
  coach                String?
  baseSystem           String?
  nextMatchDate        DateTime?
  nextMatchCompetition String?
  planCharlaUrl        String?
  planReport           Json?     @default("{}")
  planVideos           Json?     @default("[]")
  planStats            Json?     @default("{}")
  planNotes            Json?     @default("{}")
  planVisibility       Json?     @default("{}")
  planSquad            Json?     @default("[]")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([nextMatchDate])
}

model Place {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseKind {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exercises Exercise[]
}

model Exercise {
  id          String        @id @default(cuid())
  userId      String
  title       String
  kindId      String?
  space       String?
  players     String?
  duration    String?
  description String?
  imageUrl    String?
  tags        String[]      @default([])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  kind        ExerciseKind? @relation(fields: [kindId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, title])
  @@index([kindId])
}

model RPEEntry {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime
  session      Int      @default(1)
  sessionLabel String?
  sessionUid   String?
  rpe          Int
  duration     Int?
  load         Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, session], name: "userId_date_session")
  @@index([date])
  @@index([userId, date, session])
  @@index([date, session])
  @@index([sessionUid])
}

model WellnessEntry {
  id             String   @id @default(cuid())
  userId         String
  date           DateTime
  sleepQuality   Int
  sleepHours     Float?
  fatigue        Int
  muscleSoreness Int
  stress         Int
  mood           Int
  comment        String?
  total          Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date], name: "userId_date")
  @@index([date])
  @@index([userId, date])
}

model PlannerPrefs {
  id        String   @id @default(cuid())
  userId    String   @unique
  rowLabels Json     @default("{}")
  places    Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClinicalEntry {
  id                   String          @id @default(cuid())
  userId               String
  date                 DateTime
  status               ClinicalStatus
  leaveStage           LeaveStage?
  leaveKind            LeaveKind?
  diagnosis            String?
  bodyPart             String?
  laterality           Laterality?
  mechanism            Mechanism?
  severity             Severity?
  illSystem            SystemAffected?
  illSymptoms          String?
  illContagious        Boolean?
  illIsolationDays     Int?
  illAptitude          IllAptitude?
  feverMax             Float?
  startDate            DateTime?
  daysPlanned          Int?
  expectedReturn       DateTime?
  expectedReturnManual Boolean?        @default(false)
  capMinutes           Int?
  noSprint             Boolean         @default(false)
  noChangeOfDirection  Boolean         @default(false)
  gymOnly              Boolean         @default(false)
  noContact            Boolean         @default(false)
  notes                String?
  medSignature         String?
  protocolObjectives   String?
  protocolTasks        String?
  protocolControls     String?
  protocolCriteria     String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date], name: "userId_date")
  @@index([date])
  @@index([status, date])
  @@index([leaveKind])
  @@index([bodyPart])
  @@index([userId, date])
}

model ScoutingCategory {
  id        String           @id @default(cuid())
  nombre    String           @unique
  slug      String           @unique
  orden     Int              @default(0)
  color     String?
  activa    Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  players   ScoutingPlayer[]

  @@index([orden])
}

model ScoutingPlayer {
  id          String            @id @default(cuid())
  fullName    String
  positions   String[]          @default([])
  club        String?
  estado      ScoutingStatus    @default(ACTIVO)
  categoriaId String?
  agentName   String?
  agentPhone  String?
  agentEmail  String?
  playerPhone String?
  playerEmail String?
  instagram   String?
  videos      String[]          @default([])
  notes       String?
  rating      Int?
  tags        String[]          @default([])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  categoria   ScoutingCategory? @relation(fields: [categoriaId], references: [id])

  @@index([categoriaId])
  @@index([estado])
  @@index([fullName])
}

model Team {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clubName    String?
  legacyUsers User[]     @relation("TeamToUser")
  users       UserTeam[]
}

model UserTeam {
  userId    String
  teamId    String
  role      String
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, teamId], name: "userId_teamId")
}

model TrainingSession {
  id          String      @id @default(cuid())
  date        DateTime
  start       DateTime?
  end         DateTime?
  title       String
  type        SessionType
  notes       String?
  rpe         Int?
  load        Int?
  microcycle  Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([createdById])
}

enum Role {
  ADMIN
  CT
  MEDICO
  JUGADOR
  DIRECTIVO
}

enum SessionType {
  PARTIDO
  TACTICO
  FUERZA
  RECUPERACION
  EVALUACION
  LIBRE
  TACTICA
  GENERAL
  AEROBICO
}

enum ClinicalStatus {
  BAJA
  REINTEGRO
  LIMITADA
  ALTA
}

enum LeaveStage {
  PARTIDO
  ENTRENAMIENTO
  EXTRADEPORTIVO
}

enum LeaveKind {
  LESION
  ENFERMEDAD
}

enum Laterality {
  IZQ
  DER
  BILATERAL
  NA
}

enum Severity {
  LEVE
  MODERADA
  SEVERA
}

enum Mechanism {
  SOBRECARGA
  IMPACTO
  TORSION
  ESTIRAMIENTO
  RECIDIVA
  OTRO
}

enum SystemAffected {
  RESPIRATORIO
  GASTROINTESTINAL
  OTORRINO
  DERMATOLOGICO
  GENERAL
  OTRO
}

enum IllAptitude {
  SOLO_GIMNASIO
  AEROBICO_SUAVE
  CHARLAS_TACTICO
  NINGUNO
}

enum ScoutingStatus {
  ACTIVO
  WATCHLIST
  DESCARTADO
}
