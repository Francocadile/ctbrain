// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Enums base existentes
// =========================
enum Role {
  ADMIN
  CT
  MEDICO
  JUGADOR
  DIRECTIVO
}

enum SessionType {
  GENERAL
  FUERZA
  TACTICA
  AEROBICO
  RECUPERACION
}

// =========================
enum ClinicalStatus {
  BAJA
  REINTEGRO
  LIMITADA
  ALTA
}

enum LeaveStage {
  PARTIDO
  ENTRENAMIENTO
  EXTRADEPORTIVO
}

enum LeaveKind {
  LESION
  ENFERMEDAD
}

enum Laterality {
  IZQ
  DER
  BILATERAL
  NA
}

enum Severity {
  LEVE
  MODERADA
  SEVERA
}

enum Mechanism {
  SOBRECARGA
  IMPACTO
  TORSION
  ESTIRAMIENTO
  RECIDIVA
  OTRO
}

enum SystemAffected {
  RESPIRATORIO
  GASTROINTESTINAL
  OTORRINO
  DERMATOLOGICO
  GENERAL
  OTRO
}

enum IllAptitude {
  SOLO_GIMNASIO
  AEROBICO_SUAVE
  CHARLAS_TACTICO
  NINGUNO
}

// =========================
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  role      Role      @default(JUGADOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sessions        Session[]      @relation("UserSessions")
  rpeEntries      RPEEntry[]
  wellnessEntries WellnessEntry[]
  plannerPrefs    PlannerPrefs?
  exercises       Exercise[]

  clinicalEntries ClinicalEntry[]
}

model Session {
  id          String       @id @default(cuid())
  title       String
  description String?
  date        DateTime
  type        SessionType  @default(GENERAL)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  createdBy   String
  user        User         @relation("UserSessions", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([createdBy])
}

model Rival {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?

  // ---------- Datos opcionales ----------
  coach                 String?
  baseSystem            String?
  nextMatchDate         DateTime?
  nextMatchCompetition  String?

  // Plan de partido (guardado en Rival)
  planCharlaUrl         String?
  planReport            Json?     @default("{}")
  planVideos            Json?     @default("[]")
  planStats             Json?     @default("{}")
  planNotes             Json?     @default("{}")
  planVisibility        Json?     @default("{}") // << NUEVO
  // -------------------------------------

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nextMatchDate])
}

model Place {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseKind {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercises  Exercise[]
}

model Exercise {
  id          String        @id @default(cuid())

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  kindId      String?
  kind        ExerciseKind? @relation(fields: [kindId], references: [id], onDelete: SetNull)

  space       String?
  players     String?
  duration    String?
  description String?
  imageUrl    String?

  tags        String[]      @default([])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId, createdAt])
  @@index([userId, title])
  @@index([kindId])
}

model RPEEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date      DateTime
  rpe       Int
  duration  Int?
  load      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([date])
  @@index([userId, date])
}

model WellnessEntry {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date            DateTime

  sleepQuality    Int
  sleepHours      Float?
  fatigue         Int
  muscleSoreness  Int
  stress          Int
  mood            Int
  comment         String?

  total           Int?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, date])
  @@index([date])
  @@index([userId, date])
}

model PlannerPrefs {
  id        String   @id @default(cuid())
  userId    String   @unique
  rowLabels Json     @default("{}")
  places    Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =========================
// Parte clínico (NUEVO)
// =========================
model ClinicalEntry {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date      DateTime
  status    ClinicalStatus

  // Si estado = BAJA
  leaveStage LeaveStage?
  leaveKind  LeaveKind?

  // Si leaveKind = LESION
  diagnosis  String?
  bodyPart   String?
  laterality Laterality?
  mechanism  Mechanism?
  severity   Severity?

  // Si leaveKind = ENFERMEDAD
  illSystem        SystemAffected?
  illSymptoms      String?
  illContagious    Boolean?
  illIsolationDays Int?
  illAptitude      IllAptitude?
  feverMax         Float?

  // Cronología
  startDate            DateTime?
  daysPlanned          Int?
  expectedReturn       DateTime?
  expectedReturnManual Boolean? @default(false)

  // Restricciones (REINTEGRO / LIMITADA)
  capMinutes          Int?
  noSprint            Boolean  @default(false)
  noChangeOfDirection Boolean  @default(false)
  gymOnly             Boolean  @default(false)
  noContact           Boolean  @default(false)

  // Documentación
  notes        String?
  medSignature String?

  // Plan / Protocolo semanal
  protocolObjectives String?
  protocolTasks      String?
  protocolControls   String?
  protocolCriteria   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date], name: "userId_date")
  @@index([date])
  @@index([status, date])
  @@index([leaveKind])
  @@index([bodyPart])
  @@index([userId, date])
}
