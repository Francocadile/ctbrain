model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relación con usuarios/equipos se agregará en la siguiente fase
  sessions  Session[] @relation("SessionTeam")
  users     User[] @relation("UserTeam")
}
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= Enums base =========
enum Role {
  SUPERADMIN
  ADMIN
  CT
  MEDICO
  JUGADOR
  DIRECTIVO
}

enum SessionType {
  GENERAL
  FUERZA
  TACTICA
  AEROBICO
  RECUPERACION
}

// ========= Enums clínicos =========
enum ClinicalStatus {
  BAJA
  REINTEGRO
  LIMITADA
  ALTA
}

enum LeaveStage {
  PARTIDO
  ENTRENAMIENTO
  EXTRADEPORTIVO
}

enum LeaveKind {
  LESION
  ENFERMEDAD
}

enum Laterality {
  IZQ
  DER
  BILATERAL
  NA
}

enum Severity {
  LEVE
  MODERADA
  SEVERA
}

enum Mechanism {
  SOBRECARGA
  IMPACTO
  TORSION
  ESTIRAMIENTO
  RECIDIVA
  OTRO
}

enum SystemAffected {
  RESPIRATORIO
  GASTROINTESTINAL
  OTORRINO
  DERMATOLOGICO
  GENERAL
  OTRO
}

enum IllAptitude {
  SOLO_GIMNASIO
  AEROBICO_SUAVE
  CHARLAS_TACTICO
  NINGUNO
}

// ========= Modelos existentes =========
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  password   String?
  role       Role     @default(JUGADOR)

  isApproved Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  teamId    String?
  team      Team?    @relation("UserTeam", fields: [teamId], references: [id])
  sessions        Session[]      @relation("UserSessions")
  rpeEntries      RPEEntry[]
  wellnessEntries WellnessEntry[]
  plannerPrefs    PlannerPrefs?
  clinicalEntries ClinicalEntry[]
}

model Session {
  id          String      @id @default(cuid())
  title       String
  description String?
  date        DateTime
  type        SessionType @default(GENERAL)
  createdAt   DateTime    @default(now())
  teamId    String?
  team      Team?    @relation("SessionTeam", fields: [teamId], references: [id])
  updatedAt   DateTime    @updatedAt

  createdBy   String
  user        User        @relation("UserSessions", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([createdBy])
}

model Rival {
  id       String  @id @default(cuid())
  name     String  @unique
  logoUrl  String?

  coach                 String?
  baseSystem            String?

  planCharlaUrl   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Place {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  password   String?
  role       Role     @default(JUGADOR)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  title       String
  kindId      String?

  space       String?
  players     String?
  duration    String?
  description String?
  imageUrl    String?

  tags        String[]      @default([])


  @@index([kindId])
}

model RPEEntry {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date      DateTime
  session   Int      @default(1)
  sessionLabel String?
  sessionUid   String?

  rpe       Int
  duration  Int?
  load      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date, session], name: "userId_date_session")
  @@index([date])
  @@index([userId, date, session])
  @@index([date, session])
  @@index([sessionUid])
}

model WellnessEntry {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date            DateTime

  sleepQuality    Int
  sleepHours      Float?
  fatigue         Int
  muscleSoreness  Int
  stress          Int
  mood            Int
  comment         String?

  total           Int?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, date], name: "userId_date")
  @@index([date])
  @@index([userId, date])
}

model PlannerPrefs {
  id        String   @id @default(cuid())
  userId    String   @unique
  rowLabels Json     @default("{}")
  places    Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ========= Clínico =========
model ClinicalEntry {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date      DateTime
  status    ClinicalStatus

  leaveStage LeaveStage?
  leaveKind  LeaveKind?

  diagnosis  String?
  bodyPart   String?
  laterality Laterality?
  mechanism  Mechanism?
  severity   Severity?

  illSystem        SystemAffected?
  illSymptoms      String?
  illContagious    Boolean?
  illIsolationDays Int?
  illAptitude      IllAptitude?
  feverMax         Float?

  startDate            DateTime?
  daysPlanned          Int?
  expectedReturn       DateTime?
  expectedReturnManual Boolean? @default(false)

  capMinutes          Int?
  noSprint            Boolean  @default(false)
  noChangeOfDirection Boolean  @default(false)
  gymOnly             Boolean  @default(false)
  noContact           Boolean  @default(false)

  notes        String?
  medSignature String?

  protocolObjectives String?
  protocolTasks      String?
  protocolControls   String?
  protocolCriteria   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date], name: "userId_date")
  @@index([date])
  @@index([status, date])
  @@index([leaveKind])
  @@index([bodyPart])
  @@index([userId, date])
}

// ========= Scouting =========
enum ScoutingStatus {
  ACTIVO
  WATCHLIST
  DESCARTADO
}

model ScoutingCategory {
  id        String   @id @default(cuid())
  nombre    String
  slug      String   @unique
  orden     Int      @default(0)
  color     String?
  activa    Boolean  @default(true)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orden])
  @@unique([nombre])
}

model ScoutingPlayer {
  id           String            @id @default(cuid())
  fullName     String
  positions    String[]          @default([])
  club         String?
  estado       ScoutingStatus    @default(ACTIVO)


  agentName    String?
  agentPhone   String?
  agentEmail   String?
  playerPhone  String?
  playerEmail  String?
  instagram    String?

  videos       String[]          @default([])
  notes        String?
  rating       Int?
  tags         String[]          @default([])

  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([estado])
  @@index([fullName])
}
