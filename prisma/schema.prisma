generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Enums base existentes
========================= */
enum Role {
  ADMIN
  CT
  MEDICO
  JUGADOR
  DIRECTIVO
}

enum SessionType {
  GENERAL
  FUERZA
  TACTICA
  AEROBICO
  RECUPERACION
}

/* =========================
   Enums clínicos (nuevo)
========================= */
/// Estado del jugador para el parte diario
enum ClinicalStatus {
  BAJA
  REINTEGRO
  LIMITADO
  ALTA
}

/// Estadio de la BAJA
enum LeaveStage {
  PARTIDO
  ENTRENAMIENTO
  EXTRADEPORTIVO
}

/// Tipo de condición cuando está en BAJA
enum ConditionType {
  LESION
  ENFERMEDAD
}

/// Lateralidad para lesiones
enum Laterality {
  IZQ
  DER
  BIL
  NA
}

/// Severidad de lesión
enum Severity {
  LEVE
  MODERADA
  SEVERA
}

/// Mecanismo de lesión
enum Mechanism {
  SOBRECARGA
  IMPACTO
  TORSION
  ESTIRAMIENTO
  RECIDIVA
  OTRO
}

/// Sistema afectado (enfermedad)
enum DiseaseSystem {
  RESPIRATORIO
  GASTROINTESTINAL
  OTORRINO
  DERMATOLOGICO
  GENERAL
  OTRO
}

/// Qué está apto a hacer si cursa enfermedad
enum ActivityAllowance {
  NINGUNO
  GIMNASIO
  AEROBICO
  TACTICO
}

/* =========================
   Modelos existentes
========================= */
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  role      Role      @default(JUGADOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sessions        Session[]      @relation("UserSessions")
  rpeEntries      RPEEntry[]
  wellnessEntries WellnessEntry[]
  plannerPrefs    PlannerPrefs?
  exercises       Exercise[]

  // Parte clínico (nuevo)
  clinicalEntries ClinicalEntry[]  @relation("UserClinicalEntries")

  // Si querés mantener compatibilidad con código viejo,
  // asegurate de haber eliminado cualquier referencia a InjuryEntry en el repo.
}

model Session {
  id          String       @id @default(cuid())
  title       String
  description String?
  date        DateTime
  type        SessionType  @default(GENERAL)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  createdBy   String
  user        User         @relation("UserSessions", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([createdBy])
}

model Rival {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Place {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseKind {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercises  Exercise[]
}

model Exercise {
  id          String        @id @default(cuid())

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  kindId      String?
  kind        ExerciseKind? @relation(fields: [kindId], references: [id], onDelete: SetNull)

  space       String?
  players     String?
  duration    String?
  description String?
  imageUrl    String?

  tags        String[]      @default([])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId, createdAt])
  @@index([userId, title])
  @@index([kindId])
}

model RPEEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date      DateTime
  rpe       Int
  duration  Int?
  load      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([date])
  @@index([userId, date])
}

model WellnessEntry {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date            DateTime

  sleepQuality    Int
  sleepHours      Float?
  fatigue         Int
  muscleSoreness  Int
  stress          Int
  mood            Int
  comment         String?

  total           Int?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, date])
  @@index([date])
  @@index([userId, date])
}

model PlannerPrefs {
  id        String   @id @default(cuid())
  userId    String   @unique
  rowLabels Json     @default("{}")
  places    Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/* =========================
   Parte clínico (NUEVO)
   - Registro DIARIO por jugador (userId+date unique)
   - Sin "dolor" (llega por Wellness)
========================= */
model ClinicalEntry {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation("UserClinicalEntries", fields: [userId], references: [id], onDelete: Cascade)

  /// Día del registro (se guarda como 00:00 del día)
  date      DateTime

  /// Estado del jugador
  status    ClinicalStatus

  /* --- Si estado = BAJA --- */
  leaveStage      LeaveStage?
  condition       ConditionType?

  // a) Lesión
  diagnosis       String?          // diagnóstico breve visible en dashboards
  bodyPart        String?          // zona/parte (selector + "Otro" en UI)
  laterality      Laterality?
  mechanism       Mechanism?
  severity        Severity?

  // b) Enfermedad
  diseaseSystem   DiseaseSystem?
  diseaseSymptoms String?
  contagious      Boolean?         // ¿contagioso?
  isolationDays   Int?             // recomendación de aislamiento (días)
  activityAllowance ActivityAllowance? // apto: gimnasio/aeróbico/táctico/ninguno
  feverMaxC       Float?           // fiebre máxima °C

  /* --- Cronología --- */
  startDate       DateTime?        // fecha de inicio del episodio
  daysMin         Int?             // estimado rango
  daysMax         Int?
  expectedReturn  DateTime?        // ETR (puede ser calculado o manual)
  etrManual       Boolean          @default(false)

  /* --- Restricciones (para REINTEGRO/LIMITADO) --- */
  capMinutes          Int?
  noSprint            Boolean       @default(false)
  noChangeOfDirection Boolean       @default(false)
  gymOnly             Boolean       @default(false)
  noContact           Boolean       @default(false)

  /* --- Documentación --- */
  notes           String?          // informe libre
  medSignedById   String           // firma médica (usuario médico)
  medSignedAt     DateTime         @default(now())
  medSignedBy     User             @relation(fields: [medSignedById], references: [id], onDelete: Restrict)

  /* --- Plan/Protocolo semanal --- */
  protocolObjectives String?
  protocolTasks      String?
  protocolControls   String?       // controles d3/d7, etc.
  protocolCriteria   String?       // criterios de progresión

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, date], name: "userId_date")
  @@index([date])
  @@index([userId, date])
}
